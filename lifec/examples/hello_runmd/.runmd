# Example of a chaotic engine setup 
- This example is meant to try to cover a couple of different examples of lifecycle options

## Testing out fork lifecycle option
- the fork option allows the engine to start several other engines in parallel

``` test_block1
+ .engine
: .start test
: .start test2
: .fork test_block2, azure
```

 ``` test test_block1
+ .runtime
: .println test_block1
 ```

``` test2 test_block1
+ .runtime
: .println test2 test_block1
: .println test3 test_block2
```
## Testing out repeat lifecycle option
- repeat will loop back to the start of the engine and decrement a specified counter
- there is also a loop option, but that is not covered in this file 

``` test_block2
+ .engine
: .start test
: .repeat 5
```

 ``` test test_block2
+ .runtime
: .println test_block2
```

## Testing out next lifecycle option
- next will signal just a single engine to begin,

``` azure
+ .engine 
: .start test
: .next containerd
```

``` test azure
+ .runtime
: .println testing
: .println testing two
```

## Testing out exit lifecycle option
- exit will indicate that the entity is non-active
- all lifecycle options (minus the loop option) will eventually exit, when all entities have an exit, then host.should_exit() will return true

``` containerd
+ .engine
: .start test
: .exit
```
    
``` test containerd
:  src_dir  .symbol ./
:  work_dir .symbol .work/acr

+ .runtime
: .println hello containerd
: .println goodbye containerd
 ```
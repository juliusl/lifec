pub use atlier::system::{App, Extension, Value};
pub use atlier::system::{combine, combine_default};

use reality::{AttributeParser, CustomAttribute};
pub use specs::storage::BTreeStorage;
pub use specs::{Component, DispatcherBuilder, Entity, System, World, WorldExt};
pub use specs::{DefaultVecStorage, DenseVecStorage, HashMapStorage};
pub use specs::{Entities, Join, ReadStorage, WriteStorage};

use tracing::{event, Level};
pub use plugins::{
    AsyncContext, BlockContext, Config, Connection, Event, Install,
    Plugin, Process, Project, Sequence, ThunkContext, Timer, WriteFile, Thunk,
};
use std::sync::Arc;

mod resources;
pub use resources::Resources;

mod open;
// pub use open::open;

mod start;
pub use start::start;

// pub mod editor;
pub mod plugins;

mod catalog;
pub use catalog::CatalogReader;
pub use catalog::CatalogWriter;
pub use catalog::Item;

mod state;
pub use state::AttributeGraph;
pub use state::AttributeGraphErrors;
/// v2 apis 
pub use state::Query;
pub use state::AttributeIndex;
pub use state::Operation;

pub mod host;

use crate::plugins::ProxyDispatcher;

/// This function is provided by types that implement the Engine trait
pub type SetupFn = fn(&World) -> Entity; 

/// This function can be provided by the config component
pub type ConfigFn = fn(&mut ThunkContext);

/// This function is generated by 
pub type CreateFn = fn(&World, SetupFn, ConfigFn) -> Option<Entity>;

mod runtime;
pub use runtime::Runtime;

/// Event source returned by a runtime, that can be used to schedule events w/ a world
/// 
pub struct EventSource {
    /// The event struct component this source returns 
    /// 
    event: Event, 
    /// The runtime that created this event source 
    /// 
    runtime: Arc<Runtime>, 
    /// The setup operation 
    /// 
    setup: Option<Operation>,
}

impl Clone for EventSource {
    fn clone(&self) -> Self {
        Self { 
            event: self.event.duplicate(), 
            runtime: self.runtime.clone(),
            setup: None,
        }
    }
}

impl EventSource {
    /// Sets the config for the event
    /// 
    pub fn set_config(&mut self, config: Config) {
        self.event.set_config(config);
    }

    /// Configures the event to configure the context from the project 
    /// 
    /// **Caveat** The block name of the context's block context must be set
    /// 
    pub fn set_config_from_project(&mut self) {
        self.event.set_config(Config("from_project", |mut tc| {
            let tc_clone = tc.clone();
            if let Some(project) = tc_clone.project.as_ref() {
                project.configure(&mut tc);
            }
        }));
    }

    /// Creates a new entity w/ this event 
    /// 
    pub fn create_entity(&self, world: &World) -> Option<Entity> {
       None
    }


    /// Returns the event's plugin thunk
    /// 
    pub fn thunk(&self) -> Thunk {
        self.event.thunk()
    }
}

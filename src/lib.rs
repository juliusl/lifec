pub use atlier::system::{combine, combine_default};
pub use atlier::system::{App, Extension, Value};
pub use plugins::{AsyncContext, Config, Install, Plugin, Process, Thunk, ThunkContext, Timer};
pub use specs::{
    storage::BTreeStorage, Component, DefaultVecStorage, DenseVecStorage, DispatcherBuilder,
    Entities, Entity, HashMapStorage, Join, ReadStorage, System, World, WorldExt, WriteStorage,
};

use reality::{AttributeParser, CustomAttribute};
use tracing::{event, Level};

mod resources;
pub use resources::Resources;

mod open;
// pub use open::open;

mod start;
pub use start::start;

// pub mod editor;
pub mod plugins;

mod state;
pub use state::AttributeGraph;
pub use state::AttributeIndex;

mod operation;
pub use operation::Operation;

mod runtime;
pub use runtime::EventSource;
pub use runtime::Runtime;

mod engine;
pub use engine::Engine;
pub use engine::Event;

mod host;
pub use host::GuestRuntime;

/// This function is provided by types that implement the Engine trait
pub type SetupFn = fn(&World) -> Entity;

/// This function can be provided by the config component
pub type ConfigFn = fn(&mut ThunkContext);

/// This function is generated by
pub type CreateFn = fn(&World, SetupFn, ConfigFn) -> Option<Entity>;
